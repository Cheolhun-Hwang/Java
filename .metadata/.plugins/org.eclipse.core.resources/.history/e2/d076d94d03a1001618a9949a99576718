package Event_Class;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;


class MyPanel2 extends JPanel implements ActionListener{
	boolean flag = false;
	private int light_number = 0;
	
	public MyPanel2(){
		setLayout(new BorderLayout());
		JButton b = new JButton("traffic light turn on");
		b.addActionListener(this);
		add(b, BorderLayout.SOUTH);
	}

	@Override
	protected void paintComponent(Graphics g) {
		// TODO Auto-generated method stub
		super.paintComponent(g);
		g.setColor(Color.black);
		g.drawOval(100, 100, 100, 100);
		g.drawOval(100, 200, 100, 100);
		g.drawOval(100, 300, 100, 100);//drawOval(int x, int y, int width, int height)
		/* 타원 그리기(Oval) : 테두리는 가상의 경계선 사각형 안에서 그래픽 컨텍스트의 현재 색깔을 사용해서 그려진다.
		이 사각형의 왼쪽 상단은 (x, y)에 위치하고 오른쪽 하단은 (x + width, y + height)에 위치한다.
		아래 그림은 경계선 사각형 안에 그려진 타원을 나타내는 것이다.*/
		if(light_number == 0){
			g.setColor(Color.RED);
			g.fillOval(100, 100, 100, 100);
			/*fillOval - 면이 채워진 타원을 그린다.
			void fillOval(int x, int y, int width, int height)
			면이 채워진 타원은 상의 경계선 사각형 안에서 그래픽 컨텍스트의 현재 색깔을 사용해서 그려진다.
			이 사각형의 왼쪽상단은 (x, y)에 위치하고 오른쪽 하단은 (x + width - 1, y + height - 1)에 위치한다.
			 */
		}else if(light_number == 1){
			g.setColor(Color.GREEN);
			g.fillOval(100, 200, 100, 100);
		}else{
			g.setColor(Color.YELLOW);
			g.fillOval(100, 300, 100, 100);
		}
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		if(++light_number >= 3){
			light_number = 0;
		}
		repaint();
		/*repaint() 메소드 : 강제로 paint() 메소드를 한 번 더 호출하고 싶을 때 사용 (방금 처리한 작업을 화면에 바로 보여주고 싶으면 repaint()메소드를 호출하여 paint()메소드를 호출) */
	}
}

public class MyFrame extends JFrame{

	/**
	 * @param args
	 */
	public MyFrame(){
		add(new MyPanel2());
		setSize(300, 500);
		setVisible(true);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new MyFrame();
	}

}
